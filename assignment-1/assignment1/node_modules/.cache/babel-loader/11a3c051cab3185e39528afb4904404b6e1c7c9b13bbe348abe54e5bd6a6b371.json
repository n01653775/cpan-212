{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\m\\\\Documents\\\\school\\\\cpan 212\\\\week 9\\\\assignment 1\\\\assignment1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AddStudentForm from './components/AddStudentForm';\nimport StudentList from './components/StudentList';\nimport DeleteStudent from './components/DeleteStudent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [students, setStudents] = useState([]);\n\n  // Fetch students when the component mounts\n  useEffect(() => {\n    axios.get('http://localhost:3000/students').then(response => {\n      setStudents(response.data); // Store students in the state\n    }).catch(error => {\n      console.error('Error fetching students:', error);\n    });\n  }, []); // Empty dependency array means this runs only once when the component mounts\n\n  // Function to handle student deletion\n  const handleDelete = id => {\n    setStudents(students.filter(student => student.id !== id)); // Update the UI by removing the deleted student\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Student-Course Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddStudentForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Student List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StudentList, {\n      students: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), students.map(student => /*#__PURE__*/_jsxDEV(DeleteStudent, {\n      studentId: student.id,\n      onDelete: handleDelete\n    }, student.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"Xxsbsc/n21pueGlfwfykfeIEF1E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","AddStudentForm","StudentList","DeleteStudent","jsxDEV","_jsxDEV","App","_s","students","setStudents","get","then","response","data","catch","error","console","handleDelete","id","filter","student","children","fileName","_jsxFileName","lineNumber","columnNumber","map","studentId","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/m/Documents/school/cpan 212/week 9/assignment 1/assignment1/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AddStudentForm from './components/AddStudentForm';\nimport StudentList from './components/StudentList';\nimport DeleteStudent from './components/DeleteStudent';\n\nfunction App() {\n    const [students, setStudents] = useState([]);\n    \n    // Fetch students when the component mounts\n    useEffect(() => {\n        axios.get('http://localhost:3000/students')\n            .then(response => {\n                setStudents(response.data); // Store students in the state\n            })\n            .catch(error => {\n                console.error('Error fetching students:', error);\n            });\n    }, []); // Empty dependency array means this runs only once when the component mounts\n\n    // Function to handle student deletion\n    const handleDelete = (id) => {\n        setStudents(students.filter(student => student.id !== id)); // Update the UI by removing the deleted student\n    };\n\n    return (\n        <div>\n            <h1>Student-Course Application</h1>\n            <AddStudentForm />\n            <h2>Student List</h2>\n            <StudentList students={students} />\n            {/* You can pass a student ID to DeleteStudent for each student */}\n            {students.map((student) => (\n                <DeleteStudent key={student.id} studentId={student.id} onDelete={handleDelete} />\n            ))}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACZC,KAAK,CAACU,GAAG,CAAC,gCAAgC,CAAC,CACtCC,IAAI,CAACC,QAAQ,IAAI;MACdH,WAAW,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAME,YAAY,GAAIC,EAAE,IAAK;IACzBT,WAAW,CAACD,QAAQ,CAACW,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACF,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC;EAED,oBACIb,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCpB,OAAA,CAACJ,cAAc;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBpB,OAAA;MAAAgB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBpB,OAAA,CAACH,WAAW;MAACM,QAAQ,EAAEA;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAElCjB,QAAQ,CAACkB,GAAG,CAAEN,OAAO,iBAClBf,OAAA,CAACF,aAAa;MAAkBwB,SAAS,EAAEP,OAAO,CAACF,EAAG;MAACU,QAAQ,EAAEX;IAAa,GAA1DG,OAAO,CAACF,EAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkD,CACnF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAAClB,EAAA,CA/BQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}